import pandas as pd
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
import pickle
import joblib

if __name__ == '__main__':
    
    data = pd.read_csv(r'pe_features.csv', sep='|')
    X = data.drop(['Name', 'md5', 'legitimate'], axis=1).values
    y = data['legitimate'].values
    
    fsel = ExtraTreesClassifier().fit(X, y)
    model = SelectFromModel(fsel, prefit=True)
    X_new = model.transform(X)
    nb_features = X_new.shape[1]
    
    print(nb_features)
    
    X_train, X_test, y_train, y_test = train_test_split(X_new, y ,test_size=0.2)
    print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)
    
    features = []

    print('%i features identified as important:' % nb_features)

    indices = np.argsort(fsel.feature_importances_)[::-1][:nb_features]
    for f in range(nb_features):
        print("%d. feature %s (%f)" % (f + 1, data.columns[2+indices[f]], fsel.feature_importances_[indices[f]]))
        
    # XXX : take care of the feature order
    for f in sorted(np.argsort(fsel.feature_importances_)[::-1][:nb_features]):
        features.append(data.columns[2+f])

    #Algorithm comparison
    algorithms = {
            "DecisionTree": DecisionTreeClassifier(max_depth=10),
            "RandomForest": RandomForestClassifier(n_estimators=50),
            "GradientBoosting": GradientBoostingClassifier(n_estimators=50),
            "AdaBoost": AdaBoostClassifier(n_estimators=100),
            "GNB": GaussianNB(),
            "XGBoost": XGBClassifier(n_estimators=50, max_depth=10, learning_rate=0.1, subsample=0.5),
            "LightGBM": LGBMClassifier(n_estimators=50, max_depth=10, learning_rate=0.1, subsample=0.5)
        }
    
    results = {}
    print("\nNow testing algorithms")
    for algo in algorithms:
        clf = algorithms[algo]
        clf.fit(X_train, y_train)
        score = clf.score(X_test, y_test)
        print("%s : %f %%" % (algo, score*100))
        results[algo] = score
        
    winner = max(results, key=results.get)
    print('\nWinner algorithm is %s with a %f %% success' % (winner, results[winner]*100))

    # Save the algorithm and the feature list for later predictions
    print('Saving algorithm and feature list in classifier directory...')
    joblib.dump(algorithms[winner], 'classifier.pkl')
    
    with open('features.pkl', 'wb') as f:
        f.write(pickle.dumps(features))
        
    print('Saved')
